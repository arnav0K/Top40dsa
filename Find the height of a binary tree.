#include <iostream>
using namespace std;

// Definition of a binary tree node
struct Node {
    int data;
    Node* left;
    Node* right;

    Node(int val) : data(val), left(nullptr), right(nullptr) {}
};

// Function to find the height of a binary tree
int findHeight(Node* root) {
    if (root == nullptr) {
        return -1; // Base case: height of an empty tree is -1
    }

    // Recursively calculate the height of left and right subtrees
    int leftHeight = findHeight(root->left);
    int rightHeight = findHeight(root->right);

    // Height of the tree is 1 + the maximum of left and right subtree heights
    return 1 + max(leftHeight, rightHeight);
}

// Main function to test the height function
int main() {
    // Create a binary tree
    Node* root = new Node(1);
    root->left = new Node(2);
    root->right = new Node(3);
    root->left->left = new Node(4);
    root->left->right = new Node(5);
    root->right->left = new Node(6);
    root->right->right = new Node(7);

    /*
       Tree structure:
               1
             /   \
            2     3
           / \   / \
          4   5 6   7
    */

    cout << "Height of the binary tree: " << findHeight(root) << endl; // Output: 2

    return 0;
}
