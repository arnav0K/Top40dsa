#include <iostream>
using namespace std;

// Define the Node structure
struct Node {
    int value;
    Node* left;
    Node* right;
    
    Node(int val) {
        value = val;
        left = right = nullptr;
    }
};

// Preorder Traversal (Root, Left, Right)
void preorder(Node* root) {
    if (root == nullptr) return;  // Base case: return if node is nullptr
    cout << root->value << " ";
    preorder(root->left);
    preorder(root->right);
}

// Inorder Traversal (Left, Root, Right)
void inorder(Node* root) {
    if (root == nullptr) return;  // Base case: return if node is nullptr
    inorder(root->left);
    cout << root->value << " ";
    inorder(root->right);
}

// Postorder Traversal (Left, Right, Root)
void postorder(Node* root) {
    if (root == nullptr) return;  // Base case: return if node is nullptr
    postorder(root->left);
    postorder(root->right);
    cout << root->value << " ";
}

int main() {
    // Create the binary tree
    //       1
    //      / \
    //     2   3
    //    / \
    //   4   5

    Node* root = new Node(1);
    root->left = new Node(2);
    root->right = new Node(3);
    root->left->left = new Node(4);
    root->left->right = new Node(5);

    // Preorder traversal
    cout << "Preorder Traversal: ";
    preorder(root);  // Output: 1 2 4 5 3
    cout << endl;

    // Inorder traversal
    cout << "Inorder Traversal: ";
    inorder(root);   // Output: 4 2 5 1 3
    cout << endl;

    // Postorder traversal
    cout << "Postorder Traversal: ";
    postorder(root); // Output: 4 5 2 3 1
    cout << endl;

    return 0;
}
