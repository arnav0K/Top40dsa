Adjacency Matrix:

Best for dense graphs where 
 .
Ideal when frequent edge lookups are needed, such as in algorithms like Floyd-Warshall (for all-pairs shortest paths).


#include <iostream>
#include <vector>
using namespace std;

class AdjacencyMatrix {
    int V; // Number of vertices
    vector<vector<int>> matrix;

public:
    AdjacencyMatrix(int vertices) {
        V = vertices;
        matrix = vector<vector<int>>(V, vector<int>(V, 0));
    }

    void addEdge(int u, int v) {
        matrix[u][v] = 1;
        matrix[v][u] = 1; // For undirected graph
    }

    void printGraph() {
        cout << "Adjacency Matrix:\n";
        for (int i = 0; i < V; ++i) {
            for (int j = 0; j < V; ++j) {
                cout << matrix[i][j] << " ";
            }
            cout << endl;
        }
    }
};

int main() {
    int V = 5; // Number of vertices
    AdjacencyMatrix graph(V);

    graph.addEdge(0, 1);
    graph.addEdge(0, 4);
    graph.addEdge(1, 2);
    graph.addEdge(1, 3);
    graph.addEdge(1, 4);
    graph.addEdge(3, 4);

    graph.printGraph();
    return 0;
}


Adjacency List:


 .
Useful for algorithms like DFS, BFS, and Dijkstra where you need to iterate over neighbors frequently.


#include <iostream>
#include <vector>
using namespace std;

class AdjacencyList {
    int V; // Number of vertices
    vector<vector<int>> adjList;

public:
    AdjacencyList(int vertices) {
        V = vertices;
        adjList = vector<vector<int>>(V);
    }

    void addEdge(int u, int v) {
        adjList[u].push_back(v);
        adjList[v].push_back(u); // For undirected graph
    }

    void printGraph() {
        cout << "Adjacency List:\n";
        for (int i = 0; i < V; ++i) {
            cout << i << ": ";
            for (int neighbor : adjList[i]) {
                cout << neighbor << " ";
            }
            cout << endl;
        }
    }
};

int main() {
    int V = 5; // Number of vertices
    AdjacencyList graph(V);

    graph.addEdge(0, 1);
    graph.addEdge(0, 4);
    graph.addEdge(1, 2);
    graph.addEdge(1, 3);
    graph.addEdge(1, 4);
    graph.addEdge(3, 4);

    graph.printGraph();
    return 0;
}
