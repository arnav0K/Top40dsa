#include <iostream>
using namespace std;

// Definition of a linked list node
struct Node {
    int data;
    Node* next;
    Node(int val) : data(val), next(nullptr) {}
};

// Function to detect a cycle in a linked list
bool detectCycle(Node* head) {
    Node* slow = head;
    Node* fast = head;

    while (fast != nullptr && fast->next != nullptr) {
        slow = slow->next;       // Move slow pointer by one step
        fast = fast->next->next; // Move fast pointer by two steps

        if (slow == fast) {
            return true; // Cycle detected
        }
    }
    return false; // No cycle
}

// Function to create a cycle in the linked list (for testing purposes)
void createCycle(Node* head, int pos) {
    if (pos == -1) return; // No cycle
    Node* temp = head;
    Node* cycleNode = nullptr;
    int count = 0;

    while (temp->next != nullptr) {
        if (count == pos) {
            cycleNode = temp; // Save the node at the position where the cycle should start
        }
        temp = temp->next;
        count++;
    }
    temp->next = cycleNode; // Create the cycle
}

// Main function to test cycle detection
int main() {
    Node* head = new Node(1);
    head->next = new Node(2);
    head->next->next = new Node(3);
    head->next->next->next = new Node(4);
    head->next->next->next->next = new Node(5);

    // Create a cycle for testing (e.g., connect the last node to the second node)
    createCycle(head, 1);

    if (detectCycle(head)) {
        cout << "Cycle detected in the linked list." << endl;
    } else {
        cout << "No cycle in the linked list." << endl;
    }

    return 0;
}
