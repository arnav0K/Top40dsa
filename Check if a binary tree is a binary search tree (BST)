#include <iostream>
using namespace std;

// Definition of a binary tree node
struct Node {
    int data;
    Node* left;
    Node* right;

    Node(int val) : data(val), left(nullptr), right(nullptr) {}
};

// Helper function to check if a binary tree is a BST
bool isBSTUtil(Node* node, int min, int max) {
    // Base case: an empty tree is a BST
    if (node == nullptr) {
        return true;
    }

    // Check if the current node's value violates the min/max constraint
    if (node->data <= min || node->data >= max) {
        return false;
    }

    // Recursively check the left and right subtrees
    return isBSTUtil(node->left, min, node->data) &&  // Left subtree: max is node->data
           isBSTUtil(node->right, node->data, max);  // Right subtree: min is node->data
}

// Function to check if a binary tree is a BST
bool isBST(Node* root) {
    return isBSTUtil(root, INT_MIN, INT_MAX);
}

// Main function to test the isBST function
int main() {
    // Create a binary tree
    Node* root = new Node(10);
    root->left = new Node(5);
    root->right = new Node(20);
    root->left->left = new Node(1);
    root->left->right = new Node(8);

    // Check if the tree is a BST
    if (isBST(root)) {
        cout << "The tree is a Binary Search Tree." << endl;
    } else {
        cout << "The tree is NOT a Binary Search Tree." << endl;
    }

    return 0;
}
