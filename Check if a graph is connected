#include <iostream>
#include <vector>
#include <queue>
using namespace std;

// Function to perform BFS
void BFS(int start, vector<int> adj[], vector<bool>& visited) {
    queue<int> q;
    visited[start] = true;
    q.push(start);

    while (!q.empty()) {
        int node = q.front();
        q.pop();

        for (int neighbor : adj[node]) {
            if (!visited[neighbor]) {
                visited[neighbor] = true;
                q.push(neighbor);
            }
        }
    }
}

// Function to check if the graph is connected
bool isConnected(int V, vector<int> adj[]) {
    vector<bool> visited(V, false); // To track visited nodes

    // Perform BFS starting from the first node (node 0)
    BFS(0, adj, visited);

    // Check if all nodes are visited
    for (int i = 0; i < V; i++) {
        if (!visited[i]) {
            return false; // If any node is unvisited, the graph is not connected
        }
    }
    return true; // All nodes are visited, the graph is connected
}

// Function to add an edge to the graph
void addEdge(vector<int> adj[], int u, int v) {
    adj[u].push_back(v); // Add v to u's adjacency list
    adj[v].push_back(u); // Add u to v's adjacency list (undirected graph)
}

int main() {
    int V = 6; // Number of vertices
    vector<int> adj[V]; // Adjacency list representation

    // Adding edges to create a connected graph
    addEdge(adj, 0, 1);
    addEdge(adj, 0, 2);
    addEdge(adj, 1, 3);
    addEdge(adj, 2, 4);
    addEdge(adj, 3, 5);

    /*
       Graph structure:
           0
          / \
         1   2
        /     \
       3       4
        \
         5
    */

    if (isConnected(V, adj)) {
        cout << "The graph is connected." << endl;
    } else {
        cout << "The graph is not connected." << endl;
    }

    return 0;
}
