#include <iostream>
#include <vector>
using namespace std;

// Function to perform DFS
void DFS(int node, vector<int> adj[], vector<bool>& visited) {
    // Mark the current node as visited
    visited[node] = true;
    cout << node << " ";

    // Traverse all adjacent nodes
    for (int neighbor : adj[node]) {
        if (!visited[neighbor]) {
            DFS(neighbor, adj, visited);
        }
    }
}

// Function to add an edge to the graph
void addEdge(vector<int> adj[], int u, int v) {
    adj[u].push_back(v); // Add v to u's adjacency list
    adj[v].push_back(u); // Add u to v's adjacency list (for undirected graph)
}

int main() {
    int V = 6; // Number of vertices
    vector<int> adj[V]; // Adjacency list representation

    // Adding edges
    addEdge(adj, 0, 1);
    addEdge(adj, 0, 2);
    addEdge(adj, 1, 3);
    addEdge(adj, 1, 4);
    addEdge(adj, 2, 5);

    /*
       Graph structure:
           0
          / \
         1   2
        / \    \
       3   4    5
    */

    vector<bool> visited(V, false); // To track visited nodes

    cout << "DFS traversal starting from node 0: ";
    DFS(0, adj, visited); // Start DFS from node 0

    return 0;
}
