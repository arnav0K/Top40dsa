#include <iostream>
#include <vector>
#include <queue>
using namespace std;

// Function to perform BFS
void BFS(int start, vector<int> adj[], int V) {
    vector<bool> visited(V, false); // To track visited nodes
    queue<int> q;                   // Queue for BFS traversal

    // Start from the given node
    visited[start] = true;
    q.push(start);

    while (!q.empty()) {
        int node = q.front();
        q.pop();
        cout << node << " ";

        // Add all unvisited neighbors to the queue
        for (int neighbor : adj[node]) {
            if (!visited[neighbor]) {
                visited[neighbor] = true;
                q.push(neighbor);
            }
        }
    }
}

// Function to add an edge to the graph
void addEdge(vector<int> adj[], int u, int v) {
    adj[u].push_back(v); // Add v to u's adjacency list
    adj[v].push_back(u); // Add u to v's adjacency list (for undirected graph)
}

int main() {
    int V = 6; // Number of vertices
    vector<int> adj[V]; // Adjacency list representation

    // Adding edges
    addEdge(adj, 0, 1);
    addEdge(adj, 0, 2);
    addEdge(adj, 1, 3);
    addEdge(adj, 1, 4);
    addEdge(adj, 2, 5);

    /*
       Graph structure:
           0
          / \
         1   2
        / \    \
       3   4    5
    */

    cout << "BFS traversal starting from node 0: ";
    BFS(0, adj, V); // Start BFS from node 0

    return 0;
}
